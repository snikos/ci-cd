{
  "title": "Master Git",
  "lengthArticle": "30",
  "urlArticle": "https://habr.com/ru/company/ruvds/blog/599929/",
  "commands": [
    {
      "title": "Как задать имя пользователя и адрес электронной почты",
      "description": ["Имя пользователя нужно, чтобы привязывать коммиты к вашему имени. Это не то же самое, что имя пользователя учётной записи GitHub, с помощью которого выполняется вход в профиль на GitHub. Задать или изменить имя пользователя можно с помощью команды git config. Новое имя будет автоматически отображаться в последующих коммитах, отправленных на GitHub через командную строку. Если хотите скрыть своё реальное имя, можно использовать в качестве имени пользователя Git произвольный набор символов", "Кроме того, командой git config можно изменять адрес электронной почты, привязанный к вашим коммитам Git. Новый адрес электронной почты будет автоматически отображаться во всех дальнейших коммитах, поданных на GitHub через командную строку."],
      "console": ["git config --global user.name \"Tara Routray\"", "git config --global user.email \"dev@tararoutray.com\""]
    },
    {
      "title": "Кэширование учётных данных",
      "description": ["Кэшировать учётные данные можно с помощью параметра config с флагом --global. Так вы избавитесь от необходимости вручную вводить имя пользователя и пароль при создании нового коммита."],
      "console": ["git config --global credential.helper cache"]
    },
    {
      "title": "Инициализация репозитория",
      "description": ["Создать пустой репозиторий Git или вновь инициализировать существующий можно параметром init. При инициализации он создаст скрытую папку. В ней содержатся все объекты и ссылки, которые Git использует и создаёт в истории работы над проектом."],
      "console": ["git init"]
    },
    {
      "title": "Добавление отдельных файлов или всех файлов в область подготовленных файлов",
      "description": ["Добавить отдельный файл в область подготовленных файлов можно параметром add с указанием имени файла. Просто замените somefile.js на актуальное имя.", "Кроме того, можно добавить все файлы и папки в эту область, предоставив wildcard . вместо имени файла:"],
      "console": ["git add somefile.js", "git add ."]
    },
    {
      "title": "Проверка статуса репозитория",
      "description": ["Просмотреть статус нужного репозитория можно по ключевому слову status: его действие распространяется на подготовленные, неподготовленные и неотслеживаемые файлы."],
      "console": ["git status"]
    },
    {
      "title": "Внесение изменений однострочным сообщением или через редактор",
      "description": ["При создании коммита в репозитории можно добавить однострочное сообщение с помощью параметра commit с флагом -m. Само сообщение вводится непосредственно после флага, в кавычках.", "Также можно открыть текстовый редактор в терминале для написания полного сообщения коммита. Оно может состоять из нескольких строк текста, в котором подробно характеризуются изменения, внесённые в репозиторий."],
      "console": ["git commit -m \"Your short summary about the commit\"", "git commit"]
    },
    {
      "title": "Просмотр истории коммитов с изменениями",
      "description": ["Просматривать изменения, внесённые в репозиторий, можно с помощью параметра log. Он отображает список последних коммитов в порядке выполнения. Кроме того, добавив флаг -p, вы можете подробно изучить изменения, внесённые в каждый файл."],
      "console": ["git log -p"]
    },
    {
      "title": "Просмотр заданного коммита",
      "description": ["Просмотреть полный список изменений, внесённых конкретным коммитом, можно с помощью параметра show, указав идентификатор или хеш коммита. Значение хеша уникально для каждого коммита, созданного в вашем репозитории.", "Также можно использовать сокращённый хеш."],
      "console": ["git show 1af17e73721dbe0c40011b82ed4bb1a7dbe3ce29", "git show 1af17e"]
    },
    {
      "title": "Просмотр изменений до коммита",
      "description": ["Можно просматривать список изменений, внесённых в репозиторий, используя параметр diff. По умолчанию отображаются только изменения, не подготовленные для фиксации.", "Для просмотра подготовленных изменений необходимо добавить флаг --staged", "Также можно указать имя файла как параметр и просмотреть изменения, внесённые только в этот файл."],
      "console": ["git diff", "git diff --staged", "git diff somefile.js"]
    },
    {
      "title": "Удаление отслеживаемых файлов из текущего рабочего дерева",
      "description": ["Удалять файлы из текущего рабочего дерева можно с помощью параметра rm. При этом файлы удаляются и из индекса.", "Можно также использовать маски файлов (например *.js) для удаления всех файлов, соответствующих критерию."],
      "console": ["git rm dirname/somefile.js", "git rm dirname/*.html"]
    },
    {
      "title": "Переименование файлов",
      "description": ["Переименовать файл или папку можно параметром mv. Для него указывается источник source и назначение destination. Источник — реально существующий файл или папка, а назначение — существующая папка. При выполнении команды файл или папка, указанные как источник, будут перемещены в папку назначения. Индекс будет обновлён соответственно, но изменения нужно записать."],
      "console": ["git mv dir1/somefile.js dir2"]
    },
    {
      "title": "Отмена подготовленных и неподготовленных изменений",
      "description": ["Восстановить файлы рабочего дерева, не подготовленные к коммиту, можно параметром checkout. Для проведения операции требуется указать путь к файлу. Если путь не указан, параметр git checkout изменит указатель HEAD, чтобы задать указанную ветку как текущую.", "Восстановить подготовленный файл рабочего дерева можно параметром reset. Потребуется указать путь к файлу, чтобы убрать его из области подготовленных файлов. При этом не будет производиться откат никаких изменений или модификаций — однако файл перейдёт в категорию не подготовленных к коммиту.", "Если нужно выполнить это действие для всех подготовленных файлов, путь к ним указывать не надо."],
      "console": ["git checkout somefile.js", "git reset HEAD somefile.js", "git reset HEAD"]
    },
    {
      "title": "Изменение последнего коммита",
      "description": ["Внести изменения в последний коммит можно параметром commit с флагом --amend. Например, вы записали изменения, внесённые в ряд файлов, и поняли, что допустили ошибку в сообщении коммита. В этом случае можете воспользоваться указанной командой, чтобы отредактировать сообщение предыдущего коммита, не изменяя его снимок.", "Также можно вносить изменения в файлы, отправленные ранее. Например, вы изменили несколько файлов в ряде папок и хотите их записать как единый снимок, но забыли добавить в коммит одну из папок. Чтобы исправить такую ошибку, достаточно подготовить для фиксации остальные файлы и папки и создать коммит с флагами --amend и --no-edit. Флаг --no-edit позволит внести в коммит поправку без изменения сообщения коммита. В этом случае итоговый коммит заменит неполный, а выглядеть это будет так, как будто мы отправили изменения ко всем файлам в нужных папках как единый снимок.", "С помощью amend прекрасно исправляются локальные коммиты, а исправления можно передать в общий репозиторий. Однако изменять коммиты, уже доступные другим пользователям, не следует. Помните, что изменённые коммиты являются совершенно новыми, а предыдущий коммит уже не будет доступен в текущей ветке. Последствия будут такими же, как при отмене изменений публичного снимка."],
      "console": ["git commit --amend -m \"Updated message for the previous commit\"", "git add dir1\n git commit\n # Here you forgot to add dir2 to commit, you can execute the following command to amend the other files and folders.\n git add dir2\n git commit --amend --no-edit", ""]
    },
    {
      "title": "Откат последнего коммита",
      "description": ["Откатить последний коммит можно с помощью параметра revert. Создастся новый коммит, содержащий обратные преобразования относительно предыдущего, и добавится к истории текущей ветки.", "Разница между revert и reset: Команда git revert отменяет изменения, записанные только одним коммитом. Она не откатывает проект к более раннему состоянию, удаляя все последующие коммиты, как это делает команда git reset. У команды revert есть два крупных преимущества по сравнению с reset. Во-первых, она не меняет историю проекта и производит операцию, безопасную для коммитов. Во-вторых, её объектом выступает конкретный коммит, созданный в любой момент истории, а git reset всегда берёт за точку отсчёта текущий коммит. К примеру, если нужно отменить старый коммит с помощью git reset, придётся удалить все коммиты, поданные после целевого, а затем выполнить их повторно. Следовательно, команда git revert — гораздо более удобный и безопасный способ отмены изменений."],
      "console": ["git revert HEAD", ""]
    },
    {
      "title": "Откат заданного коммита",
      "description": ["Откатить проект до заданного коммита можно с помощью параметра revert и идентификатора коммита. Создастся новый коммит — копия коммита с предоставленным идентификатором — и добавится к истории текущей ветки."],
      "console": ["git revert 1af17e"]
    },
    {
      "title": "Создание новой ветки и переход в неё",
      "description": ["Создать новую ветку можно с помощью параметра branch, указав имя ветки.", "Но Git не переключится на неё автоматически. Для автоматического перехода нужно добавить флаг -b и параметр checkout."],
      "console": ["git branch new_branch_name", "git checkout -b new_branch_name"]
    },
    {
      "title": "Просмотр списка веток",
      "description": ["Можно просматривать полный список веток, используя параметр branch. Команда отобразит все ветки, отметит текущую звёздочкой (*) и выделит её цветом.", "Также можно вывести список удалённых веток с помощью флага -a"],
      "console": ["git branch", "git branch -a"]
    },
    {
      "title": "Удаление ветки",
      "description": ["Удалить ветку можно параметром branch с добавлением флага -d и указанием имени ветки. Если вы завершили работу над веткой и объединили её с основной, можно её удалить без потери истории. Однако, если выполнить команду удаления до слияния — в результате появится сообщение об ошибке. Этот защитный механизм предотвращает потерю доступа к файлам.", "Для принудительного удаления ветки используется флаг -D с заглавной буквой. В этом случае ветка будет удалена независимо от текущего статуса, без предупреждений.", "Вышеуказанные команды удаляют только локальную копию ветки. В удалённом репозитории она может сохраниться. Если хотите стереть удалённую ветку, выполните следующую команду:"],
      "console": ["git branch -d existing_branch_name", "git branch -D existing_branch_name", "git push origin --delete existing_branch_name"]
    },
    {
      "title": "Слияние двух веток",
      "description": ["Объединить две ветки можно параметром merge с указанием имени ветки. Команда объединит указанную ветку с основной.", "Если надо выполнить коммит слияния, выполните команду git merge с флагом --no-ff. Указанная команда объединит заданную ветку с основной и произведёт коммит слияния. Это необходимо для фиксации всех слияний в вашем репозитории."],
      "console": ["git merge existing_branch_name", "git merge --no-ff existing_branch_name"]
    },
    {
      "title": "Отображение журнала фиксации в виде графика для текущей или всех веток",
      "description": ["Просмотреть историю коммитов в виде графика для текущей ветки можно с помощью параметра log и флагов --graph --oneline --decorate. Опция --graph выведет график в формате ASCII, отражающий структуру ветвления истории коммитов. В связке с флагами --oneline и --decorate, этот флаг упрощает понимание того, к какой ветке относится каждый коммит.", "Для просмотра истории коммитов по всем веткам используется флаг --all"],
      "console": ["git log --graph --oneline --decorate", "git log --all --graph --oneline --decorate"]
    },
    {
      "title": "Прекращение слияния при конфликте",
      "description": ["Прервать слияние в случае конфликта можно параметром merge с флагом --abort. Он позволяет остановить процесс слияния и вернуть состояние, с которого этот процесс был начат.", "Также при конфликте слияния можно использовать параметр reset, чтобы восстановить конфликтующие файлы до стабильного состояния."],
      "console": ["git merge --abort", "git reset"]
    },
    {
      "title": "Добавление удалённого репозитория",
      "description": ["Добавить удалённый репозиторий можно параметром remote add, указав shortname и url требуемого репозитория."],
      "console": ["git remote add awesomeapp https://github.com/someurl.."]
    },
    {
      "title": "Просмотр удалённых URL-адресов",
      "description": ["Просматривать удалённые URL-адреса можно параметром remote с флагом -v. Этот параметр отображает удалённые подключения к другим репозиториям. Такая команда открывает доступ к интерфейсу управления удалёнными записями, которые хранятся в файле .git/config репозитория."],
      "console": ["git remote -v"]
    },
    {
      "title": "Получение дополнительных сведений об удалённом репозитории",
      "description": ["Получить подробные сведения об удалённом репозитории можно с помощью параметра remote show с указанием имени репозитория — например, origin. Эта команда отображает список веток, связанных с удалённым репозиторием, а также рабочих станций, подключённых для получения и отправки файлов."],
      "console": ["git remote show origin"]
    },
    {
      "title": "Отправка изменений в удалённый репозиторий",
      "description": ["Отправлять изменения в удалённый репозиторий можно параметром push с указанием имени репозитория и ветки. Эта команда передаёт локальные изменения в центральный репозиторий, где с ними могут ознакомиться другие участники проекта."],
      "console": ["git push origin main"]
    },
    {
      "title": "Получение изменений из удалённого репозитория",
      "description": ["Для загрузки изменений из удалённого репозитория используется параметр pull. Он скачивает копию текущей ветки с указанного удалённого репозитория и объединяет её с локальной копией.", "Также можно просмотреть подробные сведения о загруженных файлах с помощью флага --verbose."],
      "console": ["git pull", "git pull --verbose"]
    },
    {
      "title": "Слияние удалённого репозитория с локальным",
      "description": ["Слияние удалённого репозитория с локальным выполняется параметром merge с указанием имени удалённого репозитория."],
      "console": ["git merge origin"]
    },
    {
      "title": "Отправка новой ветки в удалённый репозиторий",
      "description": ["Передать новую ветку в удалённый репозиторий можно параметром push с флагом -u, указав имя репозитория и имя ветки."],
      "console": ["git push -u origin new_branch"]
    },
    {
      "title": "Удаление удалённой ветки",
      "description": ["Чтобы избавиться от удалённой ветки, используйте параметр push с флагом --delete, указав имя удалённого репозитория и имя ветки."],
      "console": ["git push --delete origin existing_branch"]
    },
    {
      "title": "Использование перебазирования",
      "description": ["Для доступа к этой функции используйте параметр rebase с указанием имени ветки. Перебазирование — это процесс объединения или перемещения последовательности коммитов на новый родительский снимок. Эта команда изменит основу ветки с одного коммита на другой, как если бы вы начали ветку с другого коммита. В Git это достигается за счёт создания новых коммитов и применения их к указанному базовому коммиту. Необходимо понимать, что, хотя ветка и выглядит такой же, она состоит из совершенно новых коммитов."],
      "console": ["git rebase branch_name"]
    }
  ]
}